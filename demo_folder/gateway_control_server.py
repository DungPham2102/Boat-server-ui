# gateway_control_server.py
# Script n√†y ch·∫°y tr√™n Raspberry Pi Gateway.
# N√≥ kh·ªüi ƒë·ªông m·ªôt web server ƒë·ªÉ l·∫Øng nghe l·ªánh t·ª´ Laptop Server.
# Khi nh·∫≠n ƒë∆∞·ª£c l·ªánh, n√≥ s·∫Ω g·ª≠i l·ªánh ƒë√≥ ƒë·∫øn thuy·ªÅn qua LoRa.

# --- C√†i ƒë·∫∑t --- 
# pip install Flask
# pip install pyserial
# ---------------------

from flask import Flask, request, jsonify
import serial # Th∆∞ vi·ªán ƒë·ªÉ giao ti·∫øp v·ªõi c·ªïng serial

app = Flask(__name__)

# --- C·∫•u h√¨nh LoRa ---
# C·∫•u h√¨nh c·ªïng serial cho module LoRa c·ªßa b·∫°n.
# T√™n c·ªïng s·∫Ω kh√°c nhau t√πy thu·ªôc v√†o ph·∫ßn c·ª©ng c·ªßa b·∫°n.
# V√≠ d·ª•: '/dev/ttyS0' ho·∫∑c '/dev/ttyAMA0' tr√™n Raspberry Pi
# ho·∫∑c 'COM3' tr√™n Windows ƒë·ªÉ th·ª≠ nghi·ªám.
try:
    # ƒê·∫£m b·∫£o baud rate kh·ªõp v·ªõi c·∫•u h√¨nh module LoRa c·ªßa b·∫°n.
    lora_serial = serial.Serial('/dev/ttyS0', 9600, timeout=1)
    print("‚úÖ Module LoRa ƒë√£ k·∫øt n·ªëi qua c·ªïng serial.")
except serial.SerialException as e:
    print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ m·ªü c·ªïng serial cho LoRa: {e}")
    print("   - H√£y ch·∫Øc ch·∫Øn r·∫±ng t√™n c·ªïng l√† ch√≠nh x√°c v√† user c√≥ quy·ªÅn truy c·∫≠p.")
    print("   - M·ªôt h√†m LoRa gi·∫£ s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng thay th·∫ø.")
    lora_serial = None
# --------------------------

def send_lora_command(command_string):
    """
    H√†m n√†y nh·∫≠n chu·ªói l·ªánh v√† g·ª≠i n√≥ qua module LoRa.
    """
    if lora_serial and lora_serial.is_open:
        try:
            print(f"üì° ƒêang truy·ªÅn l·ªánh LoRa: '{command_string}'")
            # G·ª≠i chu·ªói ƒë∆∞·ª£c m√£ h√≥a th√†nh bytes.
            lora_serial.write(command_string.encode('utf-8'))
            # B·∫°n c√≥ th·ªÉ c·∫ßn th√™m k√Ω t·ª± xu·ªëng d√≤ng t√πy thu·ªôc v√†o code ·ªü thuy·ªÅn.
            # lora_serial.write((command_string + '\n').encode('utf-8'))
            return True
        except Exception as e:
            print(f"‚ùå L·ªñI: Kh√¥ng th·ªÉ g·ª≠i l·ªánh LoRa: {e}")
            return False
    else:
        # H√†m gi·∫£ ƒë·ªÉ th·ª≠ nghi·ªám m√† kh√¥ng c·∫ßn module LoRa th·∫≠t.
        print(f"üì° (GI·∫¢) L·ªánh LoRa s·∫Ω l√†: '{command_string}'")
        return True

@app.route('/command', methods=['POST'])
def handle_command():
    """
    ƒê√¢y l√† API endpoint m√† Laptop Server s·∫Ω g·ªçi.
    N√≥ nh·∫≠n m·ªôt l·ªánh (d∆∞·ªõi d·∫°ng chu·ªói th√¥) v√† chuy·ªÉn ti·∫øp ƒë·∫øn module LoRa.
    """
    # D·ªØ li·ªáu l·ªánh gi·ªù l√† to√†n b·ªô body c·ªßa request, d∆∞·ªõi d·∫°ng text
    command = request.get_data(as_text=True)

    if not command:
        return "Error: Request body is empty", 400

    # T√°ch boat_id t·ª´ chu·ªói l·ªánh ƒë·ªÉ ghi log (t√πy ch·ªçn)
    try:
        boat_id = command.split(',')[0]
        print(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh cho thuy·ªÅn '{boat_id}': {command}")
    except IndexError:
        print(f"‚úÖ ƒê√£ nh·∫≠n l·ªánh (kh√¥ng c√≥ boat_id): {command}")


    # D·ªØ li·ªáu 'command' nh·∫≠n ƒë∆∞·ª£c ch√≠nh l√† chu·ªói text b·∫°n c·∫ßn
    # v√≠ d·ª•: "00001,1500,21.689,102.092,1.0,0.1,0.05"
    # Ch·ªâ c·∫ßn g·ª≠i th·∫≥ng chu·ªói n√†y qua LoRa.
    if send_lora_command(command):
        return "Command sent to LoRa module", 200
    else:
        return "Failed to send command via LoRa", 500

if __name__ == '__main__':
    print("--- Gateway Control Server ---")
    # Ch·∫°y server, cho ph√©p truy c·∫≠p t·ª´ m·∫°ng n·ªôi b·ªô.
    # S·ª≠ d·ª•ng c·ªïng 5000.
    app.run(host='0.0.0.0', port=5000)
